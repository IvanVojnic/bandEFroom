// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/invite.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InviteClient is the client API for Invite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteClient interface {
	SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*SendInviteResponse, error)
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error)
	DeclineInvite(ctx context.Context, in *DeclineInviteRequest, opts ...grpc.CallOption) (*DeclineInviteResponse, error)
}

type inviteClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteClient(cc grpc.ClientConnInterface) InviteClient {
	return &inviteClient{cc}
}

func (c *inviteClient) SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*SendInviteResponse, error) {
	out := new(SendInviteResponse)
	err := c.cc.Invoke(ctx, "/room.invite/SendInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*AcceptInviteResponse, error) {
	out := new(AcceptInviteResponse)
	err := c.cc.Invoke(ctx, "/room.invite/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) DeclineInvite(ctx context.Context, in *DeclineInviteRequest, opts ...grpc.CallOption) (*DeclineInviteResponse, error) {
	out := new(DeclineInviteResponse)
	err := c.cc.Invoke(ctx, "/room.invite/DeclineInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteServer is the server API for Invite service.
// All implementations must embed UnimplementedInviteServer
// for forward compatibility
type InviteServer interface {
	SendInvite(context.Context, *SendInviteRequest) (*SendInviteResponse, error)
	AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error)
	DeclineInvite(context.Context, *DeclineInviteRequest) (*DeclineInviteResponse, error)
	mustEmbedUnimplementedInviteServer()
}

// UnimplementedInviteServer must be embedded to have forward compatible implementations.
type UnimplementedInviteServer struct {
}

func (UnimplementedInviteServer) SendInvite(context.Context, *SendInviteRequest) (*SendInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvite not implemented")
}
func (UnimplementedInviteServer) AcceptInvite(context.Context, *AcceptInviteRequest) (*AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedInviteServer) DeclineInvite(context.Context, *DeclineInviteRequest) (*DeclineInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineInvite not implemented")
}
func (UnimplementedInviteServer) mustEmbedUnimplementedInviteServer() {}

// UnsafeInviteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteServer will
// result in compilation errors.
type UnsafeInviteServer interface {
	mustEmbedUnimplementedInviteServer()
}

func RegisterInviteServer(s grpc.ServiceRegistrar, srv InviteServer) {
	s.RegisterService(&Invite_ServiceDesc, srv)
}

func _Invite_SendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).SendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.invite/SendInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).SendInvite(ctx, req.(*SendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.invite/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_DeclineInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).DeclineInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.invite/DeclineInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).DeclineInvite(ctx, req.(*DeclineInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invite_ServiceDesc is the grpc.ServiceDesc for Invite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "room.invite",
	HandlerType: (*InviteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInvite",
			Handler:    _Invite_SendInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _Invite_AcceptInvite_Handler,
		},
		{
			MethodName: "DeclineInvite",
			Handler:    _Invite_DeclineInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/invite.proto",
}
